1.％'运算符主要受限于它是二元运算符，因此最多可以使用两个参数。其中一个参数已经专门用于格式字符串，所有其他变量都被压缩到剩下的参数中。目前的做法是使用字典或元组作为第二个参数，但正如许多人评论 [3]，这缺乏灵活性。“全有或全无”的方法（意味着必须在只有位置参数或只有命名参数之间进行选择）被认为是过度约束。
2.可用的整数表示类型是：

'b' - 二进制。输出基数2中的数字。
'c' - 性格。将整数转换为相应的
      打印前的Unicode字符。
'd' - 十进制整数。输出基数为10的数字。
'o' - 八进制格式。输出基数为8的数字。
'x' - 十六进制格式。输出基数为16的数字，使用较低的
      9以上数字的大小写字母。
'X' - 十六进制格式。输出基数为16的数字，使用上限
      9以上数字的大小写字母。
'n' - 数字。这与'd'相同，只是它使用了
      当前语言环境设置插入适当的
      数字分隔符。
''（无） - 与'd'相同
可用的浮点表示类型是：

'e' - 指数表示法。用科学打印数字
      使用字母'e'表示指数的符号。
'E' - 指数表示法。与'e'相同，除了它转换
      数字为大写。
'f' - 定点。将数字显示为定点
      数。
'F' - 定点。与'f'相同，但它会转换数字
      大写。
'g' - 一般格式。这会将数字打印为定点
      数字，除非数字太大，在这种情况下
      它切换到'e'指数表示法。
'G' - 一般格式。与'g'相同，但切换到'E'
      如果数量变大。
'n' - 数字。这与'g'相同，只是它使用了
      当前语言环境设置插入适当的
      数字分隔符。
'％' - 百分比。将数字乘以100并显示
      固定（'f'）格式，后跟百分号。
''（无） - 类似于'g'，但它打印至少一个
      小数点后的数字。
3.'format'是主要的API方法。它需要一个格式模板，以及一组任意的位置和关键字参数。'format'只是一个调用'vformat'的包装器。

'vformat'是执行格式化实际工作的函数。对于要传递预定义参数字典的情况，它是作为单独的函数公开的，而不是使用* args和 ** kwds语法将字典解压缩并重新打包为单个参数。'vformat'将格式模板字符串分解为字符数据和替换字段
4.class collections.defaultdict（[ default_factory [，... ] ] ）
返回一个新的类字典对象。 defaultdict是内置类的子dict类。它会覆盖一个方法并添加一个可写实例变量。其余功能与dict课程相同， 此处未记录。

第一个参数提供default_factory 属性的初始值; 它默认为None。所有剩余的参数都被视为传递给dict构造函数，包括关键字参数。
